package uk.ac.glasgow.jagora.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static uk.ac.glasgow.jagora.test.stub.StubStock.lemons;
import static uk.ac.glasgow.jagora.test.stub.StubTrader.trader;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import uk.ac.glasgow.jagora.Stock;
import uk.ac.glasgow.jagora.Trader;
import uk.ac.glasgow.jagora.impl.LimitBuyOrder;

public class LimitBuyOrderTest {
	
	
	// define dummy vars
	private Stock stock;
	private LimitBuyOrder order1;
	private LimitBuyOrder order2;
	private Integer quantity = 500;
	private Double order1Price = 4235.2;
	private Double order2Price = 5000.4;
	private Trader t;
	
	@Before
	public void setUp() throws Exception {
		
		// init dummy vars		
		this.stock = lemons;
		this.t = trader;
		
		// init test orders
		this.order1 = new LimitBuyOrder(t, stock, quantity, order1Price);
		this.order2 = new LimitBuyOrder(t, stock, quantity, order2Price);
	}
	
	//
	@Test
	public void testCompareTo()
	{
		// check equals using the same order
		assertTrue("error with equals", order1.compareTo(order1) == 0);
		
		// check less than using known values
		assertTrue("error with less than", order1.compareTo(order2) < 0);
		
		// check more than using known values
		assertTrue("error with more than", order1.compareTo(order2) > 0);
		
	}
	
	// test getTrader method using known value
	@Test
	public void testGetTrader()
	{
		assertEquals(t, order1.getTrader());
	}
	
	// test getStock method using known value
	@Test 
	public void testGetStock()
	{
		assertEquals(stock, order1.getStock());
	}
	
	// test getRemainingQuantity method using known value
	@Test
	public void testGetRemainingQuantity()
	{
		assertEquals(quantity, order1.getRemainingQuantity());
		
	}
	
	// test getPrice method using known value
	@Test
	public void testGetPrice()
	{
		assertEquals(order1Price, order1.getPrice());
	}
	
	// perform tearDown
	@After
	public void tearDown(){
		stock = null;
		quantity = null;
		order1Price = null;
		order2Price = null;
		order1 = null;
		order2 = null;
		t = null;
	}
}